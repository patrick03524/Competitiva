# -*- coding: utf-8 -*-
"""Sudoku.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NMHKHE1RAcVU71BjCR6ylxyNH0Awfu3H
"""

##Definición de Librerías

import matplotlib
import matplotlib.pyplot as plt
import numpy as np
import time

##Definición del Tablero como entrada

tablero2 = [[0,0,0,0,0,0,0,0,0],
           [0,0,0,0,0,0,0,0,0],
           [0,0,0,0,0,0,0,0,0],
           [0,0,0,0,0,0,0,0,0],
           [0,0,0,0,0,0,0,0,0],
           [0,0,0,0,0,0,0,0,0],
           [0,0,0,0,0,0,0,0,0],
           [0,0,0,0,0,0,0,0,0],
           [0,0,0,0,0,0,0,0,0]]
print(np.matrix(tablero2))

##Definición del Tablero como ejemplo

tablero = [[5,3,0,0,7,0,0,0,0],
           [6,0,0,1,9,5,0,0,0],
           [0,9,8,0,0,0,0,6,0],
           [8,0,0,0,6,0,0,0,3],
           [4,0,0,8,0,3,0,0,1],
           [7,0,0,0,2,0,0,0,6],
           [0,6,0,0,0,0,2,8,0],
           [0,0,0,4,1,9,0,0,5],
           [0,0,0,0,8,0,0,7,9]] 
print(np.matrix(tablero))

##Asignación del Tablero usado con el Tablero de Entrada

#tablero = tablero2

##Definición función possible que comprobará si es posible colocar un 
##determinado valor dentro del tablero verificando en primer lugar por 
##filas y luego por columnas

def possible(y,x,n):
  global tablero
  for i in range(0,9):
    if(tablero[y][i] == n):
      return False
  for i in range(0,9):
    if(tablero[i][x] == n):
      return False
  x0 = (x//3)*3
  y0 = (y//3)*3
  for i in range(0,3):
    for j in range(0,3):
      if(tablero[y0+i][x0+j] == n):
        return False
  return True

##Definición de la función principal que resolverá todo el sudoku
##llamando a la función possible(y,x,n) de manera greedy

def solve():
  global tablero
  for y in range(9):
    for x in range(9):
      if tablero[y][x] == 0:
        for n in range(1,10):
          if possible(y,x,n):
            tablero[y][x] = n
            solve()
            tablero[y][x] = 0
        return
  #print(np.matrix(tablero))

##LLamada de la función que resolverá el Sudoku definiendo y retornando
##los tiempos que demora

inicio = time.time()
solve()
final = time.time()
print(np.matrix(tablero))
print(f"He tardado {round(final - inicio, 1)} segundos.")
print("YAY")